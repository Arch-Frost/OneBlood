# Form implementation generated from reading ui file 'dashboard.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


import datetime
from PyQt6 import QtCore, QtGui, QtWidgets
import mysql.connector

class Ui_MainWindow(QtWidgets.QMainWindow):
    manageUserSelectedID = 0;
    donorSelectedID = 0;
    PatientSelectedID = 0;

    mydb = mysql.connector.connect(
        host="localhost",
        user="root",
        password="psudo",
        database="blood_bank"
    )

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1060, 633)
        MainWindow.setMinimumSize(QtCore.QSize(1060, 633))
        MainWindow.setMaximumSize(QtCore.QSize(1060, 633))
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("background-color: rgb(255, 114, 128);\n"
"gridline-color: rgb(0, 0, 127);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(210, 0, 851, 611))
        font = QtGui.QFont()
        font.setFamily("Sitka Display")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        self.stackedWidget.setFont(font)
        self.stackedWidget.setStyleSheet("background-color: rgb(0, 0, 0);\n"
"color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);\n"
"font: 700 italic 10pt \"Sitka Display\";")
        self.stackedWidget.setFrameShape(QtWidgets.QFrame.Shape.WinPanel)
        self.stackedWidget.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.stackedWidget.setObjectName("stackedWidget")
        self.register_user = QtWidgets.QWidget()
        self.register_user.setObjectName("register_user")
        self.registeruser_name_label = QtWidgets.QLabel(self.register_user)
        self.registeruser_name_label.setGeometry(QtCore.QRect(80, 100, 55, 61))
        self.registeruser_name_label.setStyleSheet("color: rgb(0, 0, 0);")
        self.registeruser_name_label.setObjectName("registeruser_name_label")
        self.registeruser_DOB_label = QtWidgets.QLabel(self.register_user)
        self.registeruser_DOB_label.setGeometry(QtCore.QRect(80, 190, 101, 31))
        self.registeruser_DOB_label.setStyleSheet("color: rgb(0, 0, 0);")
        self.registeruser_DOB_label.setObjectName("registeruser_DOB_label")
        self.registeruser_phone_label = QtWidgets.QLabel(self.register_user)
        self.registeruser_phone_label.setGeometry(QtCore.QRect(80, 270, 55, 31))
        self.registeruser_phone_label.setStyleSheet("color: rgb(0, 0, 0);")
        self.registeruser_phone_label.setObjectName("registeruser_phone_label")
        self.registeruser_gender_label = QtWidgets.QLabel(self.register_user)
        self.registeruser_gender_label.setGeometry(QtCore.QRect(390, 120, 71, 31))
        self.registeruser_gender_label.setStyleSheet("font: 700 italic 10pt \"Sitka Display\";\n"
"color: rgb(0, 0, 0);")
        self.registeruser_gender_label.setObjectName("registeruser_gender_label")
        self.registeruser_bloodgrp_label = QtWidgets.QLabel(self.register_user)
        self.registeruser_bloodgrp_label.setGeometry(QtCore.QRect(390, 190, 111, 41))
        self.registeruser_bloodgrp_label.setStyleSheet("color: rgb(0, 0, 0);")
        self.registeruser_bloodgrp_label.setObjectName("registeruser_bloodgrp_label")
        self.registeruser_address_label = QtWidgets.QLabel(self.register_user)
        self.registeruser_address_label.setGeometry(QtCore.QRect(390, 260, 71, 51))
        self.registeruser_address_label.setStyleSheet("color: rgb(0, 0, 0);")
        self.registeruser_address_label.setObjectName("registeruser_address_label")
        self.registeruser_name_textfield = QtWidgets.QLineEdit(self.register_user)
        self.registeruser_name_textfield.setGeometry(QtCore.QRect(160, 120, 141, 22))
        self.registeruser_name_textfield.setStyleSheet("color: rgb(115, 134, 213);")
        self.registeruser_name_textfield.setMaxLength(20)
        self.registeruser_name_textfield.setObjectName("registeruser_name_textfield")
        self.registeruser_phone_textfield = QtWidgets.QLineEdit(self.register_user)
        self.registeruser_phone_textfield.setGeometry(QtCore.QRect(160, 270, 141, 22))
        self.registeruser_phone_textfield.setMaxLength(11)
        self.registeruser_phone_textfield.setObjectName("registeruser_phone_textfield")
        self.registeruser_radiobutton_male = QtWidgets.QRadioButton(self.register_user)
        self.registeruser_radiobutton_male.setGeometry(QtCore.QRect(530, 120, 95, 31))
        self.registeruser_radiobutton_male.setChecked(True)
        self.registeruser_radiobutton_male.setObjectName("registeruser_radiobutton_male")
        self.registeruser_radiobutton_male_2 = QtWidgets.QRadioButton(self.register_user)
        self.registeruser_radiobutton_male_2.setGeometry(QtCore.QRect(660, 120, 95, 31))
        self.registeruser_radiobutton_male_2.setObjectName("registeruser_radiobutton_male_2")
        self.registeruser_bloodgrp_combobox = QtWidgets.QComboBox(self.register_user)
        self.registeruser_bloodgrp_combobox.setGeometry(QtCore.QRect(580, 190, 73, 41))
        self.registeruser_bloodgrp_combobox.setStyleSheet("color: rgb(115, 134, 213);")
        self.registeruser_bloodgrp_combobox.setObjectName("registeruser_bloodgrp_combobox")
        self.registeruser_bloodgrp_combobox.addItem("")
        self.registeruser_bloodgrp_combobox.addItem("")
        self.registeruser_bloodgrp_combobox.addItem("")
        self.registeruser_bloodgrp_combobox.addItem("")
        self.registeruser_bloodgrp_combobox.addItem("")
        self.registeruser_bloodgrp_combobox.addItem("")
        self.registeruser_bloodgrp_combobox.addItem("")
        self.registeruser_bloodgrp_combobox.addItem("")
        self.registeruser_date_textfield = QtWidgets.QDateEdit(self.register_user)
        self.registeruser_date_textfield.setGeometry(QtCore.QRect(159, 190, 141, 31))
        self.registeruser_date_textfield.setAcceptDrops(False)
        self.registeruser_date_textfield.setStyleSheet("color: rgb(115, 134, 213);")
        self.registeruser_date_textfield.setObjectName("registeruser_date_textfield")
        self.registeruser_address_textfield = QtWidgets.QLineEdit(self.register_user)
        self.registeruser_address_textfield.setGeometry(QtCore.QRect(550, 270, 181, 22))
        self.registeruser_address_textfield.setMaxLength(40)
        self.registeruser_address_textfield.setObjectName("registeruser_address_textfield")
        self.registeruser_save_button = QtWidgets.QPushButton(self.register_user)
        self.registeruser_save_button.setGeometry(QtCore.QRect(130, 470, 181, 31))
        self.registeruser_save_button.setStyleSheet("background-color: rgb(255, 114, 128);\n"
"border-radius: 4px 4px 4px 4px;")
        self.registeruser_save_button.setObjectName("registeruser_save_button")
        self.registeruser_reset_button = QtWidgets.QPushButton(self.register_user)
        self.registeruser_reset_button.setGeometry(QtCore.QRect(570, 470, 181, 31))
        self.registeruser_reset_button.setStyleSheet("background-color: rgb(255, 114, 128);\n"
"border-radius: 4px 4px 4px 4px;")
        self.registeruser_reset_button.setObjectName("registeruser_reset_button")
        self.registeruser_status_label = QtWidgets.QLabel(self.register_user)
        self.registeruser_status_label.setGeometry(QtCore.QRect(80, 340, 81, 51))
        self.registeruser_status_label.setObjectName("registeruser_status_label")
        self.registeruser_status_combobox = QtWidgets.QComboBox(self.register_user)
        self.registeruser_status_combobox.setGeometry(QtCore.QRect(160, 340, 81, 51))
        self.registeruser_status_combobox.setStyleSheet("color: rgb(115, 134, 213);")
        self.registeruser_status_combobox.setObjectName("registeruser_status_combobox")
        self.registeruser_status_combobox.addItem("")
        self.registeruser_status_combobox.addItem("")
        self.label = QtWidgets.QLabel(self.register_user)
        self.label.setGeometry(QtCore.QRect(10, 20, 601, 51))
        self.label.setStyleSheet("\n"
"font: 700 italic 16pt \"Verdana\";\n"
"color: rgb(255, 114, 128);\n"
"\n"
"")
        self.label.setWordWrap(False)
        self.label.setObjectName("label")
        self.registeruser_lastdonation_label = QtWidgets.QLabel(self.register_user)
        self.registeruser_lastdonation_label.setGeometry(QtCore.QRect(390, 360, 131, 20))
        self.registeruser_lastdonation_label.setObjectName("registeruser_lastdonation_label")
        self.registeruser_lastdonation_textfield = QtWidgets.QDateEdit(self.register_user)
        self.registeruser_lastdonation_textfield.setGeometry(QtCore.QRect(550, 350, 161, 29))
        self.registeruser_lastdonation_textfield.setStyleSheet("color: rgb(115, 134, 213);")
        self.registeruser_lastdonation_textfield.setObjectName("registeruser_lastdonation_textfield")
        self.stackedWidget.addWidget(self.register_user)
        self.manage_users = QtWidgets.QWidget()
        self.manage_users.setObjectName("manage_users")
        self.manageuser_label = QtWidgets.QLabel(self.manage_users)
        self.manageuser_label.setGeometry(QtCore.QRect(10, 20, 261, 51))
        self.manageuser_label.setStyleSheet("\n"
"font: 700 italic 16pt \"Verdana\";\n"
"color: rgb(255, 114, 128);\n"
"\n"
"")
        self.manageuser_label.setObjectName("manageuser_label")
        self.manageuser_bloodgrp_combobox = QtWidgets.QComboBox(self.manage_users)
        self.manageuser_bloodgrp_combobox.setGeometry(QtCore.QRect(650, 90, 73, 21))
        self.manageuser_bloodgrp_combobox.setStyleSheet("color: rgb(255, 114, 128);")
        self.manageuser_bloodgrp_combobox.setObjectName("manageuser_bloodgrp_combobox")
        self.manageuser_bloodgrp_combobox.addItem("")
        self.manageuser_bloodgrp_combobox.addItem("")
        self.manageuser_bloodgrp_combobox.addItem("")
        self.manageuser_bloodgrp_combobox.addItem("")
        self.manageuser_bloodgrp_combobox.addItem("")
        self.manageuser_bloodgrp_combobox.addItem("")
        self.manageuser_bloodgrp_combobox.addItem("")
        self.manageuser_bloodgrp_combobox.addItem("")
        self.manageuser_bloodgrp_label = QtWidgets.QLabel(self.manage_users)
        self.manageuser_bloodgrp_label.setGeometry(QtCore.QRect(490, 90, 111, 31))
        self.manageuser_bloodgrp_label.setStyleSheet("font: 700 italic 12pt \"Sitka Display\";")
        self.manageuser_bloodgrp_label.setObjectName("manageuser_bloodgrp_label")
        self.manageuser_reset_button = QtWidgets.QPushButton(self.manage_users)
        self.manageuser_reset_button.setGeometry(QtCore.QRect(500, 280, 93, 28))
        self.manageuser_reset_button.setStyleSheet("background-color: rgb(255, 114, 128);\n"
"border-radius: 4px 4px 4px 4px;")
        self.manageuser_reset_button.setObjectName("manageuser_reset_button")
        self.manageuser_name_textfield = QtWidgets.QLineEdit(self.manage_users)
        self.manageuser_name_textfield.setGeometry(QtCore.QRect(180, 100, 151, 22))
        self.manageuser_name_textfield.setMaxLength(40)
        self.manageuser_name_textfield.setObjectName("manageuser_name_textfield")
        self.manageuser_status_label = QtWidgets.QLabel(self.manage_users)
        self.manageuser_status_label.setGeometry(QtCore.QRect(490, 180, 61, 41))
        self.manageuser_status_label.setStyleSheet("font: 700 italic 12pt \"Sitka Display\";")
        self.manageuser_status_label.setObjectName("manageuser_status_label")
        self.manageuser_phone_textfield = QtWidgets.QLineEdit(self.manage_users)
        self.manageuser_phone_textfield.setGeometry(QtCore.QRect(180, 190, 151, 22))
        self.manageuser_phone_textfield.setMaxLength(11)
        self.manageuser_phone_textfield.setObjectName("manageuser_phone_textfield")
        self.manageuser_phone_label = QtWidgets.QLabel(self.manage_users)
        self.manageuser_phone_label.setGeometry(QtCore.QRect(80, 170, 55, 61))
        self.manageuser_phone_label.setStyleSheet("font: 700 italic 12pt \"Sitka Display\";")
        self.manageuser_phone_label.setObjectName("manageuser_phone_label")
        self.manageuser_save_button = QtWidgets.QPushButton(self.manage_users)
        self.manageuser_save_button.setGeometry(QtCore.QRect(200, 280, 93, 28))
        self.manageuser_save_button.setStyleSheet("background-color: rgb(255, 114, 128);\n"
"border-radius: 4px 4px 4px 4px;")
        self.manageuser_save_button.setObjectName("manageuser_save_button")
        self.manageuser_name_label = QtWidgets.QLabel(self.manage_users)
        self.manageuser_name_label.setGeometry(QtCore.QRect(80, 90, 55, 41))
        self.manageuser_name_label.setStyleSheet("font: 700 italic 12pt \"Sitka Display\";")
        self.manageuser_name_label.setObjectName("manageuser_name_label")
        self.manageuser_status_combobox = QtWidgets.QComboBox(self.manage_users)
        self.manageuser_status_combobox.setGeometry(QtCore.QRect(650, 190, 73, 21))
        self.manageuser_status_combobox.setObjectName("manageuser_status_combobox")
        self.manageuser_status_combobox.addItem("")
        self.manageuser_status_combobox.addItem("")
        self.manageuser_table = QtWidgets.QTableWidget(self.manage_users)
        self.manageuser_table.setGeometry(QtCore.QRect(70, 360, 721, 221))
        self.manageuser_table.setStyleSheet("color: rgb(115, 134, 213);\n"
"border-color: rgb(255, 114, 128);")
        self.manageuser_table.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.manageuser_table.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.manageuser_table.setTabKeyNavigation(False)
        self.manageuser_table.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.SingleSelection)
        self.manageuser_table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows)
        self.manageuser_table.setObjectName("manageuser_table")
        self.manageuser_table.setColumnCount(8)
        self.manageuser_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.manageuser_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.manageuser_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.manageuser_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.manageuser_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.manageuser_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.manageuser_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.manageuser_table.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.manageuser_table.setHorizontalHeaderItem(7, item)
        self.manageuser_name_label.raise_()
        self.manageuser_label.raise_()
        self.manageuser_bloodgrp_combobox.raise_()
        self.manageuser_bloodgrp_label.raise_()
        self.manageuser_reset_button.raise_()
        self.manageuser_name_textfield.raise_()
        self.manageuser_status_label.raise_()
        self.manageuser_phone_textfield.raise_()
        self.manageuser_phone_label.raise_()
        self.manageuser_save_button.raise_()
        self.manageuser_status_combobox.raise_()
        self.manageuser_table.raise_()
        self.stackedWidget.addWidget(self.manage_users)
        self.donate = QtWidgets.QWidget()
        self.donate.setObjectName("donate")
        self.donate_list_label = QtWidgets.QLabel(self.donate)
        self.donate_list_label.setGeometry(QtCore.QRect(120, 260, 171, 61))
        self.donate_list_label.setStyleSheet("font: 700 italic 16pt \"Sitka Display\";")
        self.donate_list_label.setObjectName("donate_list_label")
        self.donate_name_label = QtWidgets.QLabel(self.donate)
        self.donate_name_label.setGeometry(QtCore.QRect(130, 140, 61, 21))
        self.donate_name_label.setStyleSheet("font: 700 italic 12pt \"Sitka Display\";")
        self.donate_name_label.setObjectName("donate_name_label")
        self.donate_bloodgrp_label = QtWidgets.QLabel(self.donate)
        self.donate_bloodgrp_label.setGeometry(QtCore.QRect(420, 120, 111, 61))
        self.donate_bloodgrp_label.setStyleSheet("font: 700 italic 12pt \"Sitka Display\";")
        self.donate_bloodgrp_label.setObjectName("donate_bloodgrp_label")
        self.donate_name_textfield = QtWidgets.QLineEdit(self.donate)
        self.donate_name_textfield.setGeometry(QtCore.QRect(210, 140, 161, 22))
        self.donate_name_textfield.setMaxLength(20)
        self.donate_name_textfield.setReadOnly(True)
        self.donate_name_textfield.setObjectName("donate_name_textfield")
        self.donate_bloodgrp_textfield = QtWidgets.QLineEdit(self.donate)
        self.donate_bloodgrp_textfield.setGeometry(QtCore.QRect(560, 140, 121, 22))
        self.donate_bloodgrp_textfield.setMaxLength(3)
        self.donate_bloodgrp_textfield.setReadOnly(True)
        self.donate_bloodgrp_textfield.setObjectName("donate_bloodgrp_textfield")
        self.donate_donate_button = QtWidgets.QPushButton(self.donate)
        self.donate_donate_button.setGeometry(QtCore.QRect(370, 230, 93, 28))
        self.donate_donate_button.setStyleSheet("background-color: rgb(255, 114, 128);\n"
"border-radius: 4px 4px 4px 4px;\n"
"")
        self.donate_donate_button.setObjectName("donate_donate_button")
        self.donate_table = QtWidgets.QTableWidget(self.donate)
        self.donate_table.setGeometry(QtCore.QRect(110, 330, 621, 241))
        self.donate_table.setStyleSheet("color: rgb(115, 134, 213);")
        self.donate_table.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.donate_table.setTabKeyNavigation(False)
        self.donate_table.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.SingleSelection)
        self.donate_table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows)
        self.donate_table.setObjectName("donate_table")
        self.donate_table.setColumnCount(6)
        self.donate_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.donate_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.donate_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.donate_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.donate_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.donate_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.donate_table.setHorizontalHeaderItem(5, item)
        self.label_4 = QtWidgets.QLabel(self.donate)
        self.label_4.setGeometry(QtCore.QRect(20, 0, 251, 91))
        self.label_4.setStyleSheet("\n"
"font: 700 italic 16pt \"Verdana\";\n"
"color: rgb(255, 114, 128);\n"
"\n"
"")
        self.label_4.setObjectName("label_4")
        self.stackedWidget.addWidget(self.donate)
        self.blood_transfer = QtWidgets.QWidget()
        self.blood_transfer.setObjectName("blood_transfer")
        self.bloodtransfer_name_textfield = QtWidgets.QLineEdit(self.blood_transfer)
        self.bloodtransfer_name_textfield.setGeometry(QtCore.QRect(200, 110, 171, 22))
        self.bloodtransfer_name_textfield.setMaxLength(20)
        self.bloodtransfer_name_textfield.setReadOnly(True)
        self.bloodtransfer_name_textfield.setObjectName("bloodtransfer_name_textfield")
        self.bloodtransfer_name_label = QtWidgets.QLabel(self.blood_transfer)
        self.bloodtransfer_name_label.setGeometry(QtCore.QRect(110, 110, 81, 21))
        self.bloodtransfer_name_label.setStyleSheet("font: 700 italic 12pt \"Sitka Display\";")
        self.bloodtransfer_name_label.setObjectName("bloodtransfer_name_label")
        self.bloodtransfer_bloodgrp_label = QtWidgets.QLabel(self.blood_transfer)
        self.bloodtransfer_bloodgrp_label.setGeometry(QtCore.QRect(450, 100, 121, 41))
        self.bloodtransfer_bloodgrp_label.setStyleSheet("font: 700 italic 12pt \"Sitka Display\";")
        self.bloodtransfer_bloodgrp_label.setObjectName("bloodtransfer_bloodgrp_label")
        self.bloodtransfer_bloodgrp_textfield = QtWidgets.QLineEdit(self.blood_transfer)
        self.bloodtransfer_bloodgrp_textfield.setGeometry(QtCore.QRect(580, 110, 113, 22))
        self.bloodtransfer_bloodgrp_textfield.setMaxLength(3)
        self.bloodtransfer_bloodgrp_textfield.setReadOnly(True)
        self.bloodtransfer_bloodgrp_textfield.setObjectName("bloodtransfer_bloodgrp_textfield")
        self.bloodtransfer_patients_table = QtWidgets.QTableWidget(self.blood_transfer)
        self.bloodtransfer_patients_table.setGeometry(QtCore.QRect(100, 280, 631, 301))
        self.bloodtransfer_patients_table.setStyleSheet("color: rgb(115, 134, 213);")
        self.bloodtransfer_patients_table.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.bloodtransfer_patients_table.setTabKeyNavigation(False)
        self.bloodtransfer_patients_table.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.SingleSelection)
        self.bloodtransfer_patients_table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows)
        self.bloodtransfer_patients_table.setObjectName("bloodtransfer_patients_table")
        self.bloodtransfer_patients_table.setColumnCount(5)
        self.bloodtransfer_patients_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.bloodtransfer_patients_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.bloodtransfer_patients_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.bloodtransfer_patients_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.bloodtransfer_patients_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.bloodtransfer_patients_table.setHorizontalHeaderItem(4, item)
        self.bloodtransfer_transfer_button = QtWidgets.QPushButton(self.blood_transfer)
        self.bloodtransfer_transfer_button.setGeometry(QtCore.QRect(370, 180, 93, 28))
        self.bloodtransfer_transfer_button.setStyleSheet("background-color: rgb(255, 114, 128);\n"
"border-radius: 4px 4px 4px 4px;")
        self.bloodtransfer_transfer_button.setObjectName("bloodtransfer_transfer_button")
        self.bloodtransfer_viewpatient_label = QtWidgets.QLabel(self.blood_transfer)
        self.bloodtransfer_viewpatient_label.setGeometry(QtCore.QRect(80, 230, 161, 41))
        self.bloodtransfer_viewpatient_label.setStyleSheet("font: 700 italic 16pt \"Sitka Display\";")
        self.bloodtransfer_viewpatient_label.setObjectName("bloodtransfer_viewpatient_label")
        self.label_5 = QtWidgets.QLabel(self.blood_transfer)
        self.label_5.setGeometry(QtCore.QRect(10, 10, 291, 71))
        self.label_5.setStyleSheet("\n"
"font: 700 italic 16pt \"Verdana\";\n"
"color: rgb(255, 114, 128);\n"
"\n"
"")
        self.label_5.setObjectName("label_5")
        self.stackedWidget.addWidget(self.blood_transfer)
        self.medical_history = QtWidgets.QWidget()
        self.medical_history.setObjectName("medical_history")
        self.medicalhistory_label = QtWidgets.QLabel(self.medical_history)
        self.medicalhistory_label.setGeometry(QtCore.QRect(10, 30, 301, 31))
        self.medicalhistory_label.setStyleSheet("\n"
"font: 700 italic 16pt \"Verdana\";\n"
"color: rgb(255, 114, 128);\n"
"\n"
"")
        self.medicalhistory_label.setObjectName("medicalhistory_label")
        self.medicalhistory_disease_label = QtWidgets.QLabel(self.medical_history)
        self.medicalhistory_disease_label.setGeometry(QtCore.QRect(80, 110, 131, 31))
        self.medicalhistory_disease_label.setObjectName("medicalhistory_disease_label")
        self.medicalhistory_yes_label = QtWidgets.QLabel(self.medical_history)
        self.medicalhistory_yes_label.setGeometry(QtCore.QRect(310, 110, 51, 31))
        self.medicalhistory_yes_label.setObjectName("medicalhistory_yes_label")
        self.medicalhistory_no_label = QtWidgets.QLabel(self.medical_history)
        self.medicalhistory_no_label.setGeometry(QtCore.QRect(540, 110, 55, 31))
        self.medicalhistory_no_label.setObjectName("medicalhistory_no_label")
        self.medicalhistory_label2 = QtWidgets.QLabel(self.medical_history)
        self.medicalhistory_label2.setGeometry(QtCore.QRect(80, 80, 351, 31))
        self.medicalhistory_label2.setStyleSheet("color: rgb(255, 0, 0);")
        self.medicalhistory_label2.setObjectName("medicalhistory_label2")
        self.medicalhistory_hepatitis_frame = QtWidgets.QFrame(self.medical_history)
        self.medicalhistory_hepatitis_frame.setGeometry(QtCore.QRect(80, 410, 691, 51))
        self.medicalhistory_hepatitis_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.medicalhistory_hepatitis_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.medicalhistory_hepatitis_frame.setObjectName("medicalhistory_hepatitis_frame")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.medicalhistory_hepatitis_frame)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.medicalhistory_hepatitis_label = QtWidgets.QLabel(self.medicalhistory_hepatitis_frame)
        self.medicalhistory_hepatitis_label.setObjectName("medicalhistory_hepatitis_label")
        self.horizontalLayout_7.addWidget(self.medicalhistory_hepatitis_label)
        self.medicalhistory_hepatitis_check1 = QtWidgets.QCheckBox(self.medicalhistory_hepatitis_frame)
        self.medicalhistory_hepatitis_check1.setText("")
        self.medicalhistory_hepatitis_check1.setAutoExclusive(True)
        self.medicalhistory_hepatitis_check1.setObjectName("medicalhistory_hepatitis_check1")
        self.horizontalLayout_7.addWidget(self.medicalhistory_hepatitis_check1)
        self.medicalhistory_hepatitis_check2 = QtWidgets.QCheckBox(self.medicalhistory_hepatitis_frame)
        self.medicalhistory_hepatitis_check2.setText("")
        self.medicalhistory_hepatitis_check2.setChecked(True)
        self.medicalhistory_hepatitis_check2.setAutoExclusive(True)
        self.medicalhistory_hepatitis_check2.setObjectName("medicalhistory_hepatitis_check2")
        self.horizontalLayout_7.addWidget(self.medicalhistory_hepatitis_check2)
        self.medicalhistory_lungsprob_frame = QtWidgets.QFrame(self.medical_history)
        self.medicalhistory_lungsprob_frame.setGeometry(QtCore.QRect(80, 360, 691, 51))
        self.medicalhistory_lungsprob_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.medicalhistory_lungsprob_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.medicalhistory_lungsprob_frame.setObjectName("medicalhistory_lungsprob_frame")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.medicalhistory_lungsprob_frame)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.medicalhistory_lungsprob_label = QtWidgets.QLabel(self.medicalhistory_lungsprob_frame)
        self.medicalhistory_lungsprob_label.setObjectName("medicalhistory_lungsprob_label")
        self.horizontalLayout_6.addWidget(self.medicalhistory_lungsprob_label)
        self.medicalhistory_lungsprob_check1 = QtWidgets.QCheckBox(self.medicalhistory_lungsprob_frame)
        self.medicalhistory_lungsprob_check1.setText("")
        self.medicalhistory_lungsprob_check1.setAutoExclusive(True)
        self.medicalhistory_lungsprob_check1.setObjectName("medicalhistory_lungsprob_check1")
        self.horizontalLayout_6.addWidget(self.medicalhistory_lungsprob_check1)
        self.medicalhistory_lungsprob_check2 = QtWidgets.QCheckBox(self.medicalhistory_lungsprob_frame)
        self.medicalhistory_lungsprob_check2.setText("")
        self.medicalhistory_lungsprob_check2.setChecked(True)
        self.medicalhistory_lungsprob_check2.setAutoExclusive(True)
        self.medicalhistory_lungsprob_check2.setObjectName("medicalhistory_lungsprob_check2")
        self.horizontalLayout_6.addWidget(self.medicalhistory_lungsprob_check2)
        self.medicalhistory_HIV_frame = QtWidgets.QFrame(self.medical_history)
        self.medicalhistory_HIV_frame.setGeometry(QtCore.QRect(80, 160, 691, 41))
        self.medicalhistory_HIV_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.medicalhistory_HIV_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.medicalhistory_HIV_frame.setObjectName("medicalhistory_HIV_frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.medicalhistory_HIV_frame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.medicalhistory_HIV_label = QtWidgets.QLabel(self.medicalhistory_HIV_frame)
        self.medicalhistory_HIV_label.setObjectName("medicalhistory_HIV_label")
        self.horizontalLayout.addWidget(self.medicalhistory_HIV_label)
        self.medicalhistory_HIV_check1 = QtWidgets.QCheckBox(self.medicalhistory_HIV_frame)
        self.medicalhistory_HIV_check1.setText("")
        self.medicalhistory_HIV_check1.setChecked(False)
        self.medicalhistory_HIV_check1.setAutoExclusive(True)
        self.medicalhistory_HIV_check1.setTristate(False)
        self.medicalhistory_HIV_check1.setObjectName("medicalhistory_HIV_check1")
        self.horizontalLayout.addWidget(self.medicalhistory_HIV_check1)
        self.medicalhistory_HIV_check2 = QtWidgets.QCheckBox(self.medicalhistory_HIV_frame)
        self.medicalhistory_HIV_check2.setText("")
        self.medicalhistory_HIV_check2.setChecked(True)
        self.medicalhistory_HIV_check2.setAutoExclusive(True)
        self.medicalhistory_HIV_check2.setObjectName("medicalhistory_HIV_check2")
        self.horizontalLayout.addWidget(self.medicalhistory_HIV_check2)
        self.medicalhistory_malaria_frame = QtWidgets.QFrame(self.medical_history)
        self.medicalhistory_malaria_frame.setGeometry(QtCore.QRect(80, 200, 691, 41))
        self.medicalhistory_malaria_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.medicalhistory_malaria_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.medicalhistory_malaria_frame.setObjectName("medicalhistory_malaria_frame")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.medicalhistory_malaria_frame)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.medicalhistory_malaria_label = QtWidgets.QLabel(self.medicalhistory_malaria_frame)
        self.medicalhistory_malaria_label.setObjectName("medicalhistory_malaria_label")
        self.horizontalLayout_2.addWidget(self.medicalhistory_malaria_label)
        self.medicalhistory_malaria_check1 = QtWidgets.QCheckBox(self.medicalhistory_malaria_frame)
        self.medicalhistory_malaria_check1.setText("")
        self.medicalhistory_malaria_check1.setAutoExclusive(True)
        self.medicalhistory_malaria_check1.setObjectName("medicalhistory_malaria_check1")
        self.horizontalLayout_2.addWidget(self.medicalhistory_malaria_check1)
        self.medicalhistory_malaria_check2 = QtWidgets.QCheckBox(self.medicalhistory_malaria_frame)
        self.medicalhistory_malaria_check2.setText("")
        self.medicalhistory_malaria_check2.setChecked(True)
        self.medicalhistory_malaria_check2.setAutoExclusive(True)
        self.medicalhistory_malaria_check2.setObjectName("medicalhistory_malaria_check2")
        self.horizontalLayout_2.addWidget(self.medicalhistory_malaria_check2)
        self.medicalhistory_cancer_frame = QtWidgets.QFrame(self.medical_history)
        self.medicalhistory_cancer_frame.setGeometry(QtCore.QRect(80, 240, 691, 41))
        self.medicalhistory_cancer_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.medicalhistory_cancer_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.medicalhistory_cancer_frame.setObjectName("medicalhistory_cancer_frame")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.medicalhistory_cancer_frame)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.medicalhistory_cancer_label = QtWidgets.QLabel(self.medicalhistory_cancer_frame)
        self.medicalhistory_cancer_label.setObjectName("medicalhistory_cancer_label")
        self.horizontalLayout_3.addWidget(self.medicalhistory_cancer_label)
        self.medicalhistory_cancer_check1 = QtWidgets.QCheckBox(self.medicalhistory_cancer_frame)
        self.medicalhistory_cancer_check1.setText("")
        self.medicalhistory_cancer_check1.setAutoExclusive(True)
        self.medicalhistory_cancer_check1.setObjectName("medicalhistory_cancer_check1")
        self.horizontalLayout_3.addWidget(self.medicalhistory_cancer_check1)
        self.medicalhistory_cancer_check2 = QtWidgets.QCheckBox(self.medicalhistory_cancer_frame)
        self.medicalhistory_cancer_check2.setText("")
        self.medicalhistory_cancer_check2.setChecked(True)
        self.medicalhistory_cancer_check2.setAutoExclusive(True)
        self.medicalhistory_cancer_check2.setObjectName("medicalhistory_cancer_check2")
        self.horizontalLayout_3.addWidget(self.medicalhistory_cancer_check2)
        self.medicalhistory_leukemia_frame = QtWidgets.QFrame(self.medical_history)
        self.medicalhistory_leukemia_frame.setGeometry(QtCore.QRect(80, 280, 691, 41))
        self.medicalhistory_leukemia_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.medicalhistory_leukemia_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.medicalhistory_leukemia_frame.setObjectName("medicalhistory_leukemia_frame")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.medicalhistory_leukemia_frame)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.medicalhistory_leukemia_label = QtWidgets.QLabel(self.medicalhistory_leukemia_frame)
        self.medicalhistory_leukemia_label.setObjectName("medicalhistory_leukemia_label")
        self.horizontalLayout_4.addWidget(self.medicalhistory_leukemia_label)
        self.medicalhistory_leukemia_check1 = QtWidgets.QCheckBox(self.medicalhistory_leukemia_frame)
        self.medicalhistory_leukemia_check1.setText("")
        self.medicalhistory_leukemia_check1.setAutoExclusive(True)
        self.medicalhistory_leukemia_check1.setObjectName("medicalhistory_leukemia_check1")
        self.horizontalLayout_4.addWidget(self.medicalhistory_leukemia_check1)
        self.medicalhistory_leukemia_check1_2 = QtWidgets.QCheckBox(self.medicalhistory_leukemia_frame)
        self.medicalhistory_leukemia_check1_2.setText("")
        self.medicalhistory_leukemia_check1_2.setChecked(True)
        self.medicalhistory_leukemia_check1_2.setAutoExclusive(True)
        self.medicalhistory_leukemia_check1_2.setObjectName("medicalhistory_leukemia_check1_2")
        self.horizontalLayout_4.addWidget(self.medicalhistory_leukemia_check1_2)
        self.medicalhistory_heartprob_frame = QtWidgets.QFrame(self.medical_history)
        self.medicalhistory_heartprob_frame.setGeometry(QtCore.QRect(80, 320, 691, 41))
        self.medicalhistory_heartprob_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.medicalhistory_heartprob_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.medicalhistory_heartprob_frame.setObjectName("medicalhistory_heartprob_frame")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.medicalhistory_heartprob_frame)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.medicalhistory_heartprob_label = QtWidgets.QLabel(self.medicalhistory_heartprob_frame)
        self.medicalhistory_heartprob_label.setObjectName("medicalhistory_heartprob_label")
        self.horizontalLayout_5.addWidget(self.medicalhistory_heartprob_label)
        self.medicalhistory_heasrtprob_check1 = QtWidgets.QCheckBox(self.medicalhistory_heartprob_frame)
        self.medicalhistory_heasrtprob_check1.setText("")
        self.medicalhistory_heasrtprob_check1.setAutoExclusive(True)
        self.medicalhistory_heasrtprob_check1.setObjectName("medicalhistory_heasrtprob_check1")
        self.horizontalLayout_5.addWidget(self.medicalhistory_heasrtprob_check1)
        self.medicalhistory_heasrtprob_check2 = QtWidgets.QCheckBox(self.medicalhistory_heartprob_frame)
        self.medicalhistory_heasrtprob_check2.setText("")
        self.medicalhistory_heasrtprob_check2.setChecked(True)
        self.medicalhistory_heasrtprob_check2.setAutoExclusive(True)
        self.medicalhistory_heasrtprob_check2.setObjectName("medicalhistory_heasrtprob_check2")
        self.horizontalLayout_5.addWidget(self.medicalhistory_heasrtprob_check2)
        self.pushButton_5 = QtWidgets.QPushButton(self.medical_history)
        self.pushButton_5.setGeometry(QtCore.QRect(674, 520, 91, 31))
        self.pushButton_5.setStyleSheet("background-color: rgb(255, 114, 128);\n"
"border-radius: 4px 4px 4px 4px;")
        self.pushButton_5.setObjectName("pushButton_5")
        self.stackedWidget.addWidget(self.medical_history)
        self.inventory = QtWidgets.QWidget()
        self.inventory.setObjectName("inventory")
        self.inventory_label = QtWidgets.QLabel(self.inventory)
        self.inventory_label.setGeometry(QtCore.QRect(30, 20, 191, 51))
        self.inventory_label.setStyleSheet("\n"
"font: 700 italic 16pt \"Verdana\";\n"
"color: rgb(255, 114, 128);\n"
"\n"
"")
        self.inventory_label.setObjectName("inventory_label")
        self.inventory_table = QtWidgets.QTableWidget(self.inventory)
        self.inventory_table.setGeometry(QtCore.QRect(90, 110, 631, 421))
        self.inventory_table.setStyleSheet("color: rgb(115, 134, 213);")
        self.inventory_table.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.inventory_table.setTabKeyNavigation(False)
        self.inventory_table.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.SingleSelection)
        self.inventory_table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows)
        self.inventory_table.setObjectName("inventory_table")
        self.inventory_table.setColumnCount(5)
        self.inventory_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.inventory_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.inventory_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.inventory_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.inventory_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.inventory_table.setHorizontalHeaderItem(4, item)
        self.stackedWidget.addWidget(self.inventory)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(0, 110, 211, 41))
        self.pushButton.setStyleSheet("background-color: rgb(115, 134, 213);\n"
"font: 9pt \"Segoe UI\";\n"
"color: rgb(255, 255, 255);")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../Images/register User Icon.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setIconSize(QtCore.QSize(50, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(0, 150, 211, 41))
        self.pushButton_2.setStyleSheet("background-color: rgb(115, 134, 213);\n"
"color: rgb(255, 255, 255);")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../Images/61205.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton_2.setIcon(icon1)
        self.pushButton_2.setIconSize(QtCore.QSize(50, 33))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(0, 270, 211, 41))
        self.pushButton_4.setStyleSheet("background-color: rgb(115, 134, 213);\n"
"color: rgb(255, 255, 255);\n"
"")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("../Images/inventory.jpg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton_4.setIcon(icon2)
        self.pushButton_4.setIconSize(QtCore.QSize(50, 34))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_11.setGeometry(QtCore.QRect(0, 230, 211, 41))
        self.pushButton_11.setStyleSheet("background-color: rgb(115, 134, 213);\n"
"color: rgb(255, 255, 255);")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("../Images/1165516.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton_11.setIcon(icon3)
        self.pushButton_11.setIconSize(QtCore.QSize(50, 33))
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(0, 190, 211, 41))
        self.pushButton_3.setStyleSheet("background-color: rgb(115, 134, 213);\n"
"color: rgb(255, 255, 255);")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("../Images/842371-200.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton_3.setIcon(icon4)
        self.pushButton_3.setIconSize(QtCore.QSize(50, 41))
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(-10, 0, 221, 731))
        self.label_2.setStyleSheet("background-color: rgb(115, 134, 213);")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(0, 0, 211, 111))
        self.label_3.setStyleSheet("background-color: rgb(115, 134, 213);\n"
"color: rgb(255, 114, 128);\n"
"font: 700 20pt \"Sitka\";\n"
"font: 700 italic 22pt \"Sitka\";")
        self.label_3.setObjectName("label_3")
        self.label_2.raise_()
        self.stackedWidget.raise_()
        self.pushButton.raise_()
        self.pushButton_2.raise_()
        self.pushButton_4.raise_()
        self.pushButton_11.raise_()
        self.pushButton_3.raise_()
        self.label_3.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.registeruser_save_button.clicked.connect(self.register_user_save)
        self.registeruser_reset_button.clicked.connect(self.register_user_reset)

        self.manageuser_table.itemClicked.connect(self.manageUserTableClicked)
        self.donate_table.itemClicked.connect(self.donorTableClicked)
        self.bloodtransfer_patients_table.itemClicked.connect(self.PatientTableClicked)
        

        self.pushButton.clicked.connect(self.buttonClick)
        self.pushButton_2.clicked.connect(self.buttonClick)
        self.pushButton_11.clicked.connect(self.buttonClick)
        self.pushButton_3.clicked.connect(self.buttonClick)
        self.pushButton_4.clicked.connect(self.buttonClick)
        self.bloodtransfer_transfer_button.clicked.connect(self.transferBlood)

        self.pushButton_5.clicked.connect(self.medicalHistorySaveButtonClicked)

        self.donate_donate_button.clicked.connect(self.donateButtonClicked)
        self.manageuser_save_button.clicked.connect(self.saveManageUserData)
        self.manageuser_reset_button.clicked.connect(self.clearManageUserData)

        self.fetchUserData()

        self.registeruser_status_combobox.currentTextChanged.connect(self.registerUserStatusChanged)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.registeruser_name_label.setText(_translate("MainWindow", "Name"))
        self.registeruser_DOB_label.setText(_translate("MainWindow", "Birth Date"))
        self.registeruser_phone_label.setText(_translate("MainWindow", "Phone"))
        self.registeruser_gender_label.setText(_translate("MainWindow", "Gender"))
        self.registeruser_bloodgrp_label.setText(_translate("MainWindow", "Blood Group"))
        self.registeruser_address_label.setText(_translate("MainWindow", "Address"))
        self.registeruser_radiobutton_male.setText(_translate("MainWindow", "MALE"))
        self.registeruser_radiobutton_male_2.setText(_translate("MainWindow", "FEMALE"))
        self.registeruser_bloodgrp_combobox.setItemText(0, _translate("MainWindow", "A+"))
        self.registeruser_bloodgrp_combobox.setItemText(1, _translate("MainWindow", "A-"))
        self.registeruser_bloodgrp_combobox.setItemText(2, _translate("MainWindow", "B+"))
        self.registeruser_bloodgrp_combobox.setItemText(3, _translate("MainWindow", "B-"))
        self.registeruser_bloodgrp_combobox.setItemText(4, _translate("MainWindow", "AB+"))
        self.registeruser_bloodgrp_combobox.setItemText(5, _translate("MainWindow", "AB-"))
        self.registeruser_bloodgrp_combobox.setItemText(6, _translate("MainWindow", "O+"))
        self.registeruser_bloodgrp_combobox.setItemText(7, _translate("MainWindow", "O-"))
        self.registeruser_save_button.setText(_translate("MainWindow", "SAVE"))
        self.registeruser_reset_button.setText(_translate("MainWindow", "RESET"))
        self.registeruser_status_label.setText(_translate("MainWindow", "Status"))
        self.registeruser_status_combobox.setItemText(0, _translate("MainWindow", "Donor"))
        self.registeruser_status_combobox.setItemText(1, _translate("MainWindow", "Patient"))
        self.label.setText(_translate("MainWindow", "USER REGISTRATION"))
        self.registeruser_lastdonation_label.setText(_translate("MainWindow", "Last Donation"))
        self.manageuser_label.setText(_translate("MainWindow", "MANAGE USERS"))
        self.manageuser_bloodgrp_combobox.setItemText(0, _translate("MainWindow", "A+"))
        self.manageuser_bloodgrp_combobox.setItemText(1, _translate("MainWindow", "A-"))
        self.manageuser_bloodgrp_combobox.setItemText(2, _translate("MainWindow", "B+"))
        self.manageuser_bloodgrp_combobox.setItemText(3, _translate("MainWindow", "B-"))
        self.manageuser_bloodgrp_combobox.setItemText(4, _translate("MainWindow", "AB+"))
        self.manageuser_bloodgrp_combobox.setItemText(5, _translate("MainWindow", "AB-"))
        self.manageuser_bloodgrp_combobox.setItemText(6, _translate("MainWindow", "O+"))
        self.manageuser_bloodgrp_combobox.setItemText(7, _translate("MainWindow", "O-"))
        self.manageuser_bloodgrp_label.setText(_translate("MainWindow", "Blood Group"))
        self.manageuser_reset_button.setText(_translate("MainWindow", "RESET"))
        self.manageuser_status_label.setText(_translate("MainWindow", "Status"))
        self.manageuser_phone_label.setText(_translate("MainWindow", "Phone"))
        self.manageuser_save_button.setText(_translate("MainWindow", "SAVE"))
        self.manageuser_name_label.setText(_translate("MainWindow", "Name"))
        self.manageuser_status_combobox.setItemText(0, _translate("MainWindow", "Donor"))
        self.manageuser_status_combobox.setItemText(1, _translate("MainWindow", "Patient"))
        item = self.manageuser_table.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "UserID"))
        item = self.manageuser_table.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Name"))
        item = self.manageuser_table.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Age"))
        item = self.manageuser_table.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Gender"))
        item = self.manageuser_table.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Phone Number"))
        item = self.manageuser_table.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Blood Group"))
        item = self.manageuser_table.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Address"))
        item = self.manageuser_table.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "Status"))
        self.donate_list_label.setText(_translate("MainWindow", "Donors List"))
        self.donate_name_label.setText(_translate("MainWindow", "Name"))
        self.donate_bloodgrp_label.setText(_translate("MainWindow", "Blood Group"))
        self.donate_donate_button.setText(_translate("MainWindow", "Donate"))
        item = self.donate_table.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Donor ID"))
        item = self.donate_table.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Name"))
        item = self.donate_table.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Age"))
        item = self.donate_table.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Gender"))
        item = self.donate_table.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Blood Group"))
        item = self.donate_table.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Last Donation"))
        self.label_4.setText(_translate("MainWindow", "DONATE BLOOD"))
        self.bloodtransfer_name_label.setText(_translate("MainWindow", "Name"))
        self.bloodtransfer_bloodgrp_label.setText(_translate("MainWindow", "Blood Group"))
        item = self.bloodtransfer_patients_table.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Patient ID"))
        item = self.bloodtransfer_patients_table.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Name"))
        item = self.bloodtransfer_patients_table.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Age"))
        item = self.bloodtransfer_patients_table.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Gender"))
        item = self.bloodtransfer_patients_table.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Blood Group"))
        self.bloodtransfer_transfer_button.setText(_translate("MainWindow", "Transfer"))
        self.bloodtransfer_viewpatient_label.setText(_translate("MainWindow", "View Patients"))
        self.label_5.setText(_translate("MainWindow", "BLOOD TRANSFER"))
        self.medicalhistory_label.setText(_translate("MainWindow", "MEDICAL HISTORY"))
        self.medicalhistory_disease_label.setText(_translate("MainWindow", "Disease/Condition"))
        self.medicalhistory_yes_label.setText(_translate("MainWindow", "YES"))
        self.medicalhistory_no_label.setText(_translate("MainWindow", "NO"))
        self.medicalhistory_label2.setText(_translate("MainWindow", "Please note if you have the following:"))
        self.medicalhistory_hepatitis_label.setText(_translate("MainWindow", "Hepatitis"))
        self.medicalhistory_lungsprob_label.setText(_translate("MainWindow", "Lungs Problems"))
        self.medicalhistory_HIV_label.setText(_translate("MainWindow", "HIV positive"))
        self.medicalhistory_malaria_label.setText(_translate("MainWindow", "Malaria"))
        self.medicalhistory_cancer_label.setText(_translate("MainWindow", "Cancer"))
        self.medicalhistory_leukemia_label.setText(_translate("MainWindow", "Leukemia"))
        self.medicalhistory_heartprob_label.setText(_translate("MainWindow", "Heart Problems"))
        self.pushButton_5.setText(_translate("MainWindow", "Save"))
        self.inventory_label.setText(_translate("MainWindow", "INVENTORY"))
        item = self.inventory_table.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Blood Bag ID"))
        item = self.inventory_table.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Donation Date"))
        item = self.inventory_table.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Expiration Date"))
        item = self.inventory_table.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Donation ID"))
        item = self.inventory_table.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Blood Group"))
        self.pushButton.setText(_translate("MainWindow", "Register User"))
        self.pushButton_2.setText(_translate("MainWindow", "Manage Users"))
        self.pushButton_4.setText(_translate("MainWindow", "Inventory        "))
        self.pushButton_11.setText(_translate("MainWindow", "Blood Transfer"))
        self.pushButton_3.setText(_translate("MainWindow", "Donate           "))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">ONE BLOOD</p></body></html>"))


    '''
    Self Defined Functions
    ''' 

    def buttonClick(self):
        btn = self.sender()
        btnName = btn.objectName()

        # Register User Page
        if btnName == "pushButton":
            self.register_user_reset()
            self.switch_page(0)

        # Manage User Page
        if btnName == "pushButton_2":
            # self.manageuser_table.clearContents()
            self.clearManageUserData()
            self.fetchUserData()
            self.switch_page(1)
        
        # Donate Page
        if btnName == "pushButton_3":
            self.fetchDonorData()
            self.switch_page(2)
            
        # Blood Transfer Page
        if btnName == "pushButton_11":
            self.clearpatientUserData()
            self.switch_page(3)
            self.fetchPatientData()
        
        # Inventory Page
        if btnName == "pushButton_4":
            self.fetchInventoryData()
            self.switch_page(5)

    def switch_page(self, page):
        self.stackedWidget.setCurrentIndex(page)

    def showMedicalHistoryPage(self):
        self.stackedWidget.setCurrentIndex(4)

    '''
    Functions for Manage User Page
    '''

    def saveManageUserData(self):
        print("saving user data")
        # Save the data to the database
        mycursor = self.mydb.cursor(buffered=True)
        sql = "UPDATE user SET name = %s, phone_number = %s, blood_group = %s WHERE userid = %s"
        val = (self.manageuser_name_textfield.text(), self.manageuser_phone_textfield.text(), self.manageuser_bloodgrp_combobox.currentText(), self.manageUserSelectedID)
        # print(val)
        print("ManageUserSelectedID: ", self.manageUserSelectedID)
        mycursor.execute(sql, val)

        status = self.manageuser_status_combobox.currentText()
        if status == "Donor":
            sql = "Select * from donor where userID = %s"
            val = (self.manageUserSelectedID,)
            mycursor.execute(sql, val)
            result = mycursor.fetchall()
            if len(result) == 0:
                sql = "INSERT INTO donor (userid, last_donation) SELECT userid FROM user WHERE userid = %s AND last_donation IS "
                val = (self.manageUserSelectedID,)
                mycursor.execute(sql, val)
        else:
            sql = "SELECT * FROM patient WHERE userid = %s"
            val = (self.manageUserSelectedID,)
            mycursor.execute(sql, val)
            result = mycursor.fetchall()
            if len(result) == 0:
                sql = "INSERT INTO patient (userid) SELECT userid FROM user WHERE userid = %s"
                val = (self.manageUserSelectedID,)
                mycursor.execute(sql, val)
        
        self.mydb.commit()
        print(mycursor.rowcount, "record(s) affected")
        
        # self.manageuser_table.clearContents()
        self.clearManageUserData()
        self.fetchUserData()

    def manageUserTableClicked(self):
        name = self.manageuser_table.item(self.manageuser_table.currentRow(), 1).text()
        phone = self.manageuser_table.item(self.manageuser_table.currentRow(), 4).text()
        bloodgrp = self.manageuser_table.item(self.manageuser_table.currentRow(), 5).text()
        status = self.manageuser_table.item(self.manageuser_table.currentRow(), 7).text()

        self.manageuser_name_textfield.setText(name)
        self.manageuser_phone_textfield.setText(phone)
        self.manageuser_bloodgrp_combobox.setCurrentText(bloodgrp)
        self.manageuser_status_combobox.setCurrentText(status)

        mycursor = self.mydb.cursor(buffered=True)
        mycursor.execute("SELECT userID FROM user WHERE Name = %s AND Phone_Number = %s AND Blood_Group = %s", (name, phone, bloodgrp))
        userID = mycursor.fetchone()
        self.manageUserSelectedID = userID[0]

    def fetchUserData(self):
        print("fetching user data")
        # Fetch data from the database and populate the manage user table
        mycursor = self.mydb.cursor(buffered=True)
        mycursor.execute("SELECT * FROM user")
        myresult = mycursor.fetchall()
        self.manageuser_table.clearContents()
        self.manageuser_table.setRowCount(0)
        # print(myresult)
        for x in myresult:
            rowPosition = self.manageuser_table.rowCount()
            self.manageuser_table.insertRow(rowPosition)
            self.manageuser_table.setItem(rowPosition, 0, QtWidgets.QTableWidgetItem(f"{x[0]}"))
            self.manageuser_table.setItem(rowPosition, 1, QtWidgets.QTableWidgetItem(x[1]))
            age = self.calculate_age(x[2])
            self.manageuser_table.setItem(rowPosition, 2, QtWidgets.QTableWidgetItem(f"{age}"))
            self.manageuser_table.setItem(rowPosition, 3, QtWidgets.QTableWidgetItem(x[3]))
            self.manageuser_table.setItem(rowPosition, 4, QtWidgets.QTableWidgetItem(x[4]))
            self.manageuser_table.setItem(rowPosition, 5, QtWidgets.QTableWidgetItem(x[5]))
            self.manageuser_table.setItem(rowPosition, 6, QtWidgets.QTableWidgetItem(x[6]))

            mycursor2 = self.mydb.cursor(buffered=True)
            # Check if the user is a patient
            mycursor2.execute("SELECT * FROM patient WHERE userID = %s", (x[0],))
            myresult2 = mycursor2.fetchall()
            if len(myresult2) == 0:
                # Check if the user is a donor
                mycursor2.execute("SELECT * FROM donor WHERE userID = %s", (x[0],))
                myresult2 = mycursor2.fetchall()
                if len(myresult2) == 0:
                    self.manageuser_table.setItem(rowPosition, 7, QtWidgets.QTableWidgetItem("None"))
                else:
                    self.manageuser_table.setItem(rowPosition, 7, QtWidgets.QTableWidgetItem("Donor"))
            else:
                self.manageuser_table.setItem(rowPosition, 7, QtWidgets.QTableWidgetItem("Patient"))

        self.mydb.commit()

    def clearManageUserData(self):
        print("clearing user data")
        self.manageuser_name_textfield.setText("")
        self.manageuser_phone_textfield.setText("")
        self.manageuser_bloodgrp_combobox.setCurrentText("")
        self.manageuser_status_combobox.setCurrentText("")

    def calculate_age(self, dob):
        today = datetime.date.today()
        return today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))

    '''
    Register User Functions
    '''
    def registerUserStatusChanged(self):
        if self.registeruser_status_combobox.currentText() == "Donor":
            self.registeruser_lastdonation_label.show()
            self.registeruser_lastdonation_textfield.show()
            self.registeruser_lastdonation_textfield.setDate(datetime.date.today())
        else:
            self.registeruser_lastdonation_label.hide()
            self.registeruser_lastdonation_textfield.hide()
            self.registeruser_lastdonation_textfield.setDate(datetime.date.today())

    def register_user_reset(self):
        self.registeruser_name_textfield.clear()
        self.registeruser_date_textfield.clear()
        self.registeruser_phone_textfield.clear()
        self.registeruser_address_textfield.clear()
        self.registeruser_bloodgrp_combobox.setCurrentIndex(0)
        self.registeruser_status_combobox.setCurrentIndex(0)
        self.registeruser_lastdonation_textfield.clear()
        self.registeruser_radiobutton_male.setChecked(True)
    
    def register_user_save(self):
        name = self.registeruser_name_textfield.text()
        dob = self.registeruser_date_textfield.text()
        phone = self.registeruser_phone_textfield.text()
        address = self.registeruser_address_textfield.text()
        bloodgrp = self.registeruser_bloodgrp_combobox.currentText()
        status = self.registeruser_status_combobox.currentText()
        lastdonated = self.registeruser_lastdonation_textfield.text()

        dob = datetime.datetime.strptime(dob, '%m/%d/%Y').strftime('%Y-%m-%d')
        lastdonated = datetime.datetime.strptime(lastdonated, '%m/%d/%Y').strftime('%Y-%m-%d')

        if name == "":
            QtWidgets.QMessageBox.warning(self, "Error", "Name cannot be empty")
            return
        
        # Show a message box if last donation date is less than date of birth
        if lastdonated < dob:
            QtWidgets.QMessageBox.warning(self, "Error", "Last donation date cannot be less than date of birth")
            return
        # Show a message box if phone number is empty
        if phone == "":
            QtWidgets.QMessageBox.warning(self, "Error", "Phone number cannot be empty")
            return
        elif phone.isnumeric() == False:
            QtWidgets.QMessageBox.warning(self, "Error", "Phone number can only contain numbers")
            return
        
        # print(type(lastdonated))
        # print(lastdonated)

        if  self.registeruser_radiobutton_male.isChecked():
            gender ="M"
        else:
            gender ="F"
        
        
        mycursor = self.mydb.cursor(buffered=True)
        mycursor.execute("INSERT INTO user(Name,date_of_birth,Gender,Phone_Number,Blood_Group,Address) VALUES (%s, %s, %s, %s, %s, %s)", (name, dob, gender, phone, bloodgrp, address))
        
        mycursor.execute("SELECT userID FROM user WHERE Name = %s AND Phone_Number = %s AND Blood_Group = %s", (name, phone, bloodgrp))
        
        userID = mycursor.fetchone()
        userID = userID[0]

        if status == "Donor":
            mycursor.execute("INSERT INTO Donor(UserID, Last_Donation) VALUES (%s, %s)", (userID, lastdonated))
        else:
            mycursor.execute("INSERT INTO Patient(UserID) VALUES (%s)", (userID,))


        self.mydb.commit()
        self.register_user_reset()

    '''
    Donate Page Functions
    '''

    def fetchDonorData(self):
        print("Fetching Donor data")
        mycursor = self.mydb.cursor(buffered=True)

        mycursor.execute("SELECT DonorID,Name,date_of_birth,gender,blood_group,Last_Donation FROM user JOIN donor ON user.userID = donor.userID")
        myresult = mycursor.fetchall()
        self.donate_table.clearContents()
        self.donate_table.setRowCount(0)
        print(myresult)
        for x in myresult:
            rowPosition = self.donate_table.rowCount()
            self.donate_table.insertRow(rowPosition)
            self.donate_table.setItem(rowPosition, 0, QtWidgets.QTableWidgetItem(f"{x[0]}"))
            self.donate_table.setItem(rowPosition, 1, QtWidgets.QTableWidgetItem(x[1]))
            age = self.calculate_age(x[2])
            self.donate_table.setItem(rowPosition, 2, QtWidgets.QTableWidgetItem(f"{age}"))
            self.donate_table.setItem(rowPosition, 3, QtWidgets.QTableWidgetItem(x[3]))
            self.donate_table.setItem(rowPosition, 4, QtWidgets.QTableWidgetItem(x[4]))
            lastdonation = datetime.datetime.strftime(x[5], '%d/%m/%Y')
            self.donate_table.setItem(rowPosition, 5, QtWidgets.QTableWidgetItem(f"{lastdonation}" ))    

        self.mydb.commit()
 
    def donorTableClicked(self):
        currentRow = self.donate_table.currentRow()
        donorID = self.donate_table.item(currentRow, 0).text()
        name = self.donate_table.item(currentRow, 1).text()
        bloodgrp = self.donate_table.item(currentRow, 4).text()
 
        self.donorID = donorID

        self.donate_name_textfield.setText(name)
        self.donate_bloodgrp_textfield.setText(bloodgrp) 

        mycursor = self.mydb.cursor(buffered=True)
        mycursor.execute("SELECT userID FROM donor WHERE DonorID = %s", (donorID,))
        userID = mycursor.fetchone()
        self.donorSelectedID = userID[0]
        print("DonorSelectedID: ", self.donorSelectedID)

    def donateButtonClicked(self):
        mycursor = self.mydb.cursor(buffered=True)
        # Get the last donation date of the donor
        mycursor.execute("SELECT Last_Donation FROM donor WHERE DonorID = %s", (self.donorID,))
        lastdonation = mycursor.fetchone()
        lastdonation = lastdonation[0]
        print("Last Donation: ", lastdonation)
        # Get the current date
        today = datetime.date.today()
        print("Today: ", today)
        # Calculate the difference between the two dates
        diff = today - lastdonation
        print("Difference: ", diff)
        # Check if the difference is greater than 3 months
        if diff.days > 90:
            self.showMedicalHistoryPage()
            self.createDonationTransaction()
        else:
            QtWidgets.QMessageBox.warning(self, "Donation Error", "Donor cannot donate blood before 3 months of last donation")
            

    '''
    Medical History Page Functions    
    '''

    def createDonationTransaction(self):
        date = datetime.date.today()
        date = datetime.datetime.strftime(date, '%Y-%m-%d')

        mycursor = self.mydb.cursor(buffered=True)
        mycursor.execute("INSERT INTO donor_transaction(DonorID, Blood_Group, Donation_Date) SELECT DonorID, Blood_Group, %s FROM Donor JOIN User USING (UserID) WHERE userID = %s", (f"{date}", self.donorSelectedID))
        # self.mydb.commit()
        print(self.donorID)
        mycursor.execute("SELECT DonationID FROM donor_transaction WHERE DonorID = %s ORDER BY DonationID DESC LIMIT 1", (self.donorID,))
        donationID = mycursor.fetchone()
        donationID = donationID[0]
        print("DonationID: ", donationID)
        self.donationID = donationID
        self.mydb.commit()


    def clearpatientUserData(self):
        self.bloodtransfer_name_textfield.setText("")
        self.bloodtransfer_bloodgrp_textfield.setText("")

    def getMedicalHistory(self):
        hiv = self.medicalhistory_HIV_check1.isChecked()
        malaria = self.medicalhistory_malaria_check1.isChecked()
        cancer = self.medicalhistory_cancer_check1.isChecked()
        leukemia = self.medicalhistory_leukemia_check1.isChecked()
        heart = self.medicalhistory_heasrtprob_check1.isChecked()
        lungs = self.medicalhistory_lungsprob_check1.isChecked()
        hepatitis = self.medicalhistory_hepatitis_check1.isChecked()

        mycursor = self.mydb.cursor(buffered=True)
        mycursor.execute("SELECT DonationID FROM donor_transaction WHERE DonorID = %s ORDER BY DonationID DESC LIMIT 1", (self.donorID,))
        donationID = mycursor.fetchone()
        donationID = donationID[0]

        mycursor.execute("INSERT INTO medical_history(DonationID, HIV_Positve, Malaria, Cancer, Leukemia, Heart_Problems, Lung_Problems, Hepatitis) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)", (donationID, hiv, malaria, cancer, leukemia, heart, lungs, hepatitis))

        self.mydb.commit()


    def medicalHistorySaveButtonClicked(self):
        self.getMedicalHistory()
        self.storeInInventory()

        mycursor = self.mydb.cursor(buffered=True)
        # Update the last donation from donor table
        mycursor.execute("UPDATE donor SET last_donation = %s WHERE DonorID = %s", (f"{datetime.date.today()}", self.donorID))
        # Add the blood bag ID to the donor_transaction table
        mycursor.execute("UPDATE donor_transaction SET BloodBagID = (SELECT BloodBagID FROM inventory WHERE DonationID = %s) WHERE DonationID = %s", (self.donationID, self.donationID))

        mycursor.execute("SELECT BloodBagID FROM inventory WHERE DonationID = %s", (self.donationID,))
        bloodBagID = mycursor.fetchone()
        bloodBagID = bloodBagID[0]
        self.mydb.commit()

        # Show a message box to show the success of the transaction
        QtWidgets.QMessageBox.about(self, "Success", "Blood Donation Successful\nBlood Bag ID: " + str(bloodBagID))
        self.donate_name_textfield.clear()
        self.donate_bloodgrp_textfield.clear()
        self.fetchDonorData()
        self.switch_page(2)
        return

    '''
    Blood Transfer Page Functions
    '''

    def fetchPatientData(self):
        print("fetching patient data")
        mycursor = self.mydb.cursor(buffered=True)

        mycursor.execute("SELECT PatientID,Name,date_of_birth,gender,blood_group FROM user INNER JOIN patient ON user.userID = patient.userID")
        myresult = mycursor.fetchall()
        self.bloodtransfer_patients_table.clearContents()
        self.bloodtransfer_patients_table.setRowCount(0)
        # print(myresult)
        for x in myresult:
            rowPosition = self.bloodtransfer_patients_table.rowCount()
            self.bloodtransfer_patients_table.insertRow(rowPosition)
            self.bloodtransfer_patients_table.setItem(rowPosition, 0, QtWidgets.QTableWidgetItem(f"{x[0]}"))
            self.bloodtransfer_patients_table.setItem(rowPosition, 1, QtWidgets.QTableWidgetItem(x[1]))
            age = self.calculate_age(x[2])
            self.bloodtransfer_patients_table.setItem(rowPosition, 2, QtWidgets.QTableWidgetItem(f"{age}"))
            self.bloodtransfer_patients_table.setItem(rowPosition, 3, QtWidgets.QTableWidgetItem(x[3]))
            self.bloodtransfer_patients_table.setItem(rowPosition, 4, QtWidgets.QTableWidgetItem(x[4]))
           
        self.mydb.commit()

    
    def PatientTableClicked(self):
        currentRow = self.bloodtransfer_patients_table.currentRow()
        PatientID = self.bloodtransfer_patients_table.item(currentRow, 0).text()
        name = self.bloodtransfer_patients_table.item(currentRow, 1).text()
        bloodgrp = self.bloodtransfer_patients_table.item(currentRow, 4).text()

        self.bloodtransfer_name_textfield.setText(name)
     
        self.bloodtransfer_bloodgrp_textfield.setText(bloodgrp)
    

        mycursor = self.mydb.cursor(buffered=True)
        mycursor.execute("SELECT userID FROM patient WHERE PatientID = %s", (PatientID,))
        userID = mycursor.fetchone()
        self.PatientSelectedID = userID[0]
        print("PatientSelectedID: ", self.PatientSelectedID)

    '''
    Inventory Page Functions
    '''

    def fetchInventoryData(self):
        print("fetching inventory data")
        mycursor = self.mydb.cursor(buffered=True)

        mycursor.execute("SELECT BloodBagID, DonationDate, ExpirationDate, DonationID, Blood_Group FROM inventory WHERE Infected = 0")
        myresult = mycursor.fetchall()
        self.inventory_table.clearContents()
        self.inventory_table.setRowCount(0)
        # print(myresult)
        for x in myresult:
            rowPosition = self.inventory_table.rowCount()
            self.inventory_table.insertRow(rowPosition)
            self.inventory_table.setItem(rowPosition, 0, QtWidgets.QTableWidgetItem(f"{x[0]}"))
            donationDate = x[1].strftime("%d/%m/%Y")
            self.inventory_table.setItem(rowPosition, 1, QtWidgets.QTableWidgetItem(f"{donationDate}"))
            expirationDate = x[2].strftime("%d/%m/%Y")
            self.inventory_table.setItem(rowPosition, 2, QtWidgets.QTableWidgetItem(f"{expirationDate}"))
            self.inventory_table.setItem(rowPosition, 3, QtWidgets.QTableWidgetItem(f"{x[3]}"))
            self.inventory_table.setItem(rowPosition, 4, QtWidgets.QTableWidgetItem(x[4]))
        
        self.mydb.commit()

    def storeInInventory(self):
        mycursor = self.mydb.cursor(buffered=True)
        
        mycursor.execute("SELECT medical_history.Donation_Date from Medical_History JOIN Donor_Transaction USING (DonationID) WHERE DonationID = %s", (self.donationID,))

        donationDate = mycursor.fetchone()
        donationDate = donationDate[0]
        print("Donation Date: ", donationDate)

        # Calculate expiry date from donation date
        expiryDate = donationDate + datetime.timedelta(days=42)
        # expiryDate = expiryDate.strftime('%Y-%m-%d')
        print("Expiry Date: ", expiryDate)

        donationID = self.donationID
        print("DonationID: ", donationID)

        mycursor.execute("SELECT Blood_Group FROM donor JOIN user USING (UserID) WHERE DonorID = %s", (self.donorID,))

        bloodGroup = mycursor.fetchone()
        bloodGroup = bloodGroup[0]

        if self.isInfected():
            print("Infected")
            mycursor.execute("INSERT INTO inventory(DonationID, Blood_Group, DonationDate, ExpirationDate, Infected) VALUES (%s, %s, %s, %s, 1)", (donationID, bloodGroup, f"{donationDate}" , f"{expiryDate}"))
        else:
            print("Not Infected")
            mycursor.execute("INSERT INTO inventory(DonationID, Blood_Group, DonationDate, ExpirationDate, Infected) VALUES (%s, %s, %s, %s, 0)", (donationID, bloodGroup, f"{donationDate}" , f"{expiryDate}"))

        self.mydb.commit()

    def isInfected(self):
        mycursor = self.mydb.cursor(buffered=True)
        mycursor.execute("SELECT HIV_Positve, Malaria, Cancer, Leukemia, Heart_Problems, Lung_Problems, Hepatitis FROM Medical_History WHERE DonationID = %s ORDER BY Donation_Date DESC", (self.donationID,))
        medicalHistory = mycursor.fetchone()
        print("Medical History: ", medicalHistory)
        for x in medicalHistory:
            if x == 1:
                return True
        return False

    def transferBlood(self):
        currentRow = self.bloodtransfer_patients_table.currentRow()
        PatientID = self.bloodtransfer_patients_table.item(currentRow, 0).text()

        try:
            mycursor = self.mydb.cursor(buffered=True)
            
            mycursor.execute("select bloodbagID from inventory  where Blood_Group = (select Blood_Group from user where UserID=(select UserID from patient where PatientID=%s))and infected=0 and ExpirationDate >current_date() order by DonationDate ", (PatientID,))
            bloodbagID = mycursor.fetchone()
            bloodbagID = bloodbagID[0]
            print("BloodbagID: ", bloodbagID)
            self.bloodbagID = bloodbagID

            QtWidgets.QMessageBox.information(self, "Success", "Blood Transfered Successfully\nBloodbagID: "+str(bloodbagID))

            mycursor = self.mydb.cursor(buffered=True)
            mycursor.execute("DElete from inventory where bloodbagID=%s", (bloodbagID,))
            self.mydb.commit()
        
        except:
            print("No blood available for seleceted blood group")
            QtWidgets.QMessageBox.warning(self, "Error", "No blood available for seleceted blood group")
            return
   


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
